#!/usr/bin/python3from pprint import pprintfrom ctypes import *import __def__._0_transform as trandef convert(s):    i = int(s, 16)                   # convert from hex to a Python int    cp = pointer(c_int(i))           # make this into a c integer    fp = cast(cp, POINTER(c_float))  # cast the int pointer to a float pointer    return fp.contents.value         # dereference the pointer, get the floatdef convert_int16(s):    i = int(s, 16)    cp = pointer(c_int(i))    fp = cast(cp, POINTER(c_int16))    return fp.contents.valuedef data_test(n):    print('read_data_test')    data_test_13 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,                    -1, -1, -1, -1,                    1, 1, 1, 1,                    -1, -1, 1, 1,                    -1, -1, 1, 1                    ]    data_test_7 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,                   1,1,                   1,1,                   1,1,                   -1,-1,                   -1,-1,                   1,1,                   -1,-1]    if n==13:        return data_test_13    elif n==7:        return data_test_7    else:        print('укажите 7 или 13 позиционный баркер')def barker_(n):    print('read_barkker')    coef_barker = {'p7': [1,1,1,-1,-1,1,-1],                   'n7': [-1,1,-1,-1,1,1,1],                   'p13': [1, 1, 1, 1, 1,-1,-1, 1, 1,-1, 1,-1, 1],                   'n13': [1,-1, 1,-1, 1, 1,-1,-1, 1, 1, 1, 1, 1]                   }    if n:        return coef_barker[n]    else:        print('укажите 7 или 13 позиционный баркер')def READ_protokol(name,data):    print('READ_protokol')    byte_count = 4    with open(name, mode='rb') as f:        byte = f.read(byte_count)        byte = byte.hex()        #byte = int(byte, 16)        while byte:            data.append(byte)            byte = f.read(byte_count)            byte = byte.hex()            #byte = int(byte,16)    return datadef READ_float_fileS(name_files,data_str_s):    print('READ_float_fileS')    res_str_s = []    for name, d in zip(name_files, data_str_s):        #print(name)        with open(name) as f:            #print(name)            for i in f.readlines():                i = convert(i)                #i = float(i)                #print(i)                d.append(i)        res_str_s.append(d)    return res_str_sdef READ_float_hex_fileS(name_files, data_str_s, shapka_20_32):    print('READ_float_hex_fileS')    '''вычитка данных из фвйлов'''    for name,d in zip(name_files,data_str_s):    #print(name,d)        with open(name) as f:            for i in f.readlines(210):                shapka_20_32.append(i)            for i in f.readlines():                #i = convert(i)                i = float(i)                #i = int(i)                d.append(i)    return d,shapka_20_32def READ_FILE_strip(name_file_datain,DATAIN_str):    print('READ_FILE_strip')    with open(name_file_datain) as f:        for i in f.readlines():            print(i)            i = float(i.strip())            print(i)            DATAIN_str.append(i)    return DATAIN_strdef READ_FILE_HEX_16_re_im(name_file, DATAIN_str_re_im):    print('READ_FILE_HEX_16_re_im')    with open(name_file) as f:        for i in f.readlines():            re = int(i[2:6], 16)  # re = int(i)            im = int(i[6:], 16)  # im = int(i)            DATAIN_str_re_im.append(re)            DATAIN_str_re_im.append(im)    return DATAIN_str_re_imdef READ_FILE_HEX_16r_shapka20(name_file):    print('READ_FILE_HEX_16r_shapka20')    SHAPKA_10 = []    DATAIN_str_re = []    DATAIN_str_im = []    with open(name_file) as f:        for i in f.readlines(100):#200_100            #i = i[11:]            i2 = i[2:6]            i1 = i[6:10]            SHAPKA_10.append(i1)            SHAPKA_10.append(i2)        SHAPKA_5 = SHAPKA_10[10:]        #print(SHAPKA_10)        for i in f.readlines():            #i = i[11:]            re = i[2:6]            re = convert_int16(re)            re = float(re)            im = i[6:]            im = convert_int16(im)            im = float(im)            DATAIN_str_re.append(re)            DATAIN_str_im.append(im)    DATAIN_COMP = [complex(a, b) for a, b in zip(DATAIN_str_re,DATAIN_str_im)]    return DATAIN_COMP, SHAPKA_5def READ_FILE_HEX_16r_bez_sh(name_file):    print('READ_FILE_HEX_16r_bez_sh')    DATAIN_str_re = []    DATAIN_str_im = []    with open(name_file) as f:        for i in f.readlines():            # i = i[11:]            re = i[2:6]            re = convert_int16(re)            re = float(re)            im = i[6:]            im = convert_int16(im)            im = float(im)            DATAIN_str_re.append(re)            DATAIN_str_im.append(im)    DATAIN_COMP = [complex(a, b) for a, b in zip(DATAIN_str_re, DATAIN_str_im)]    print('end')    return DATAIN_COMPdef READ_float_file(name_files,data_str_s):    print('READ_float_file')    d = []    for name, d in zip(name_files, data_str_s):        with open(name) as f:            for i in f.readlines():                cp = pointer(c_int(i))  # make this into a c integer                fp = cast(cp, POINTER(c_float))  # cast the int pointer to a float pointer                i = fp.contents.value                print(i)                d.append(i)    return ddef READ_file_(file_name, data_str): #флоат, через запятую    print('READ_file_')    with open(file_name) as f:        for i in f.readlines():            #i = i.replace(',', '.')            i = float(i)            data_str.append(i)    return  data_strdef READ_FILE_zoo(name_file):    #print('READ_FILE_zoo')    DATAIN_str_re = []    DATAIN_str_im = []    zag = []    with open(name_file) as f:        for i in f.readlines(210):            zag.append(i)        #print('zag = ',len(zag))        for i in f.readlines():            re = i[2:6]            re = convert_int16(re)            re = float(re)            im = i[6:]            im = convert_int16(im)            im = float(im)            DATAIN_str_re.append(re)            DATAIN_str_im.append(im)    DATAIN_str_re1 = DATAIN_str_re[0::2]    DATAIN_str_im1 = DATAIN_str_im[0::2]    DATAIN_str_re2 = DATAIN_str_re[1::2]    DATAIN_str_im2 = DATAIN_str_im[0::2]    #DATAIN_COMP_1 = [complex(a, b) for a, b in zip(DATAIN_str_re1, DATAIN_str_im1)]    DATAIN_COMP_1 = tran.in_COMP(DATAIN_str_re1,DATAIN_str_im1)    DATAIN_COMP_2 = tran.in_COMP(DATAIN_str_re2,DATAIN_str_im2)    print('end')    return DATAIN_COMP_1, DATAIN_COMP_2def test_signal():    test_signal = [100,0,100,0,100,0,100,0,100,0,100,0,100,0,100,0,100,0]    print(len(test_signal))    return test_signaldef test_coefBPF():    coef_BPF_1 = []    #coef_BPF_1.append(complex(1,0))    i = 0    n_25 = 25    while n_25:        n_25 -= 1        i =1        coef_BPF_1.append(complex(i,0))    coef_25 = []    coef_25.append(coef_BPF_1)    coef_BPF_0 = []    #coef_BPF_0.append(complex(1, 0))    i = 0    n_25 = 25    while n_25:        n_25 -= 1        i =1        coef_BPF_0.append(complex(i,0))    n_24 = 24    while n_24:        n_24 -= 1        coef_25.append(coef_BPF_0)    return coef_25#name_file = 'E:/prog_window/Windows/test_barker.dat'#res = READ_FILE_zoo(name_file)#print(res[0])'''--------ТЕСТЫ--------d = []name_file = '_130_kan36_12.dat'READ_protokol(name_file,d)#pprint(d[:50])i = '0xC235C380'#print (convert(i))    # returns 1.88999996185302734375E1Coef_Sgat_re_r = []Coef_Sgat_re_f = []Coef_Sgat_im_r = []Coef_Sgat_im_f = []name_file_coef_sgat = ['lfm_re_rise.dat','lfm_re_fall.dat','lfm_im_rise.dat','lfm_im_fall.dat']Coef_Sgat = [Coef_Sgat_re_r, Coef_Sgat_re_f, Coef_Sgat_im_r, Coef_Sgat_im_f]READ_float_fileS(name_file_coef_sgat,Coef_Sgat)#print(Coef_Sgat_re_r)DATAIN_RE = []DATAIN_IM = []name_file_datain = 'in_lfm_re.txt'DATAIN = [DATAIN_RE, DATAIN_IM]READ_FILE_strip(name_file_datain,DATAIN)#print(DATAIN_RE)'''#data = complex()#shapka = []#data = READ_FILE_HEX_16r_shapka20('data1_5_kanalov.dat')#print(data[1])