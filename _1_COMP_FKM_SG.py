#!/usr/bin/python3from pprint import pprintimport __def__._0_transform as tran'''    Результат функции compression:    кортеж состоящий из двух элементов    0-элемент - это список данных после сжатия res в списке [re,im,re,im.. ]    1-эленер - это список модуля res    '''def compression(data, barker):    # N_disk_FKM = 210    N_fil = 1    # N_disk = N_disk_FKM * N_fil    re = data[0:-1:2]    im = data[1::2]    COMP_DATA = tran.COMP(re,im)    c = iter(barker)    i = iter(COMP_DATA)    COMP_RES_SG = []    n = 0    N_f = N_fil    Sum = complex()    while N_f:  # 5        try:            N_f -= 1            N_d = 100            while N_d:  # 210                try:                    f = next(c) * next(i)                    Sum += f                except StopIteration:                    n += 1                    N_d -= 1                    i = iter(COMP_DATA[n:])                    c = iter(barker)                    COMP_RES_SG.append(Sum)                    Sum = complex()                    continue                except:                    break        except:            break    Mod = []    for i in COMP_RES_SG:        M = abs(i)        Mod.append(M)    # print (Mod)    RES_RE_IM = tran.from_COMP_in_RE_IM(COMP_RES_SG)    RES_RE_IM = []    for i in COMP_RES_SG:        b = i.real  # b = float.hex(b)        RES_RE_IM.append(b)        d = i.imag  # d = float.hex(d)        RES_RE_IM.append(d)    # print ('res_ =',res_)    return RES_RE_IM, Moddef SG_data(data_re_im, barker):    re = data_re_im[0:-1:2]    im = data_re_im[1::2]    COMP_DATA = tran.in_COMP(re,im)    c = iter(barker)    i = iter(COMP_DATA)    COMP_RES_SG = []    n = 0    N_f = len(COMP_DATA)+6    Sum = complex()    while N_f:  # 210        try:            f = next(c) * next(i)            Sum += f        except StopIteration:            n += 1            N_f -= 1            i = iter(COMP_DATA[n:])            c = iter(barker)            COMP_RES_SG.append(Sum)            Sum = complex()            continue        except:            break    Mod = []    for i in COMP_RES_SG:        M = abs(i)        Mod.append(M)    # print (Mod)    RES_RE_IM = tran.from_COMP_in_RE_IM(COMP_RES_SG)    return RES_RE_IM, Mod, COMP_RES_SGdef COMP_FKM_SG(COMP_DATA, barker):    c = iter(barker)    i = iter(COMP_DATA)    COMP_RES_SG = []    n = 0    N_f = len(COMP_DATA)+6    Sum = complex()    while N_f:  # 210        try:            f = next(c) * next(i)            Sum += f        except StopIteration:            n += 1            N_f -= 1            i = iter(COMP_DATA[n:])            c = iter(barker)            COMP_RES_SG.append(Sum)            Sum = complex()            continue        except:            break    Mod = []    for i in COMP_RES_SG:        M = abs(i)        Mod.append(M)    # print (Mod)    RES_RE_IM = tran.from_COMP_in_RE_IM(COMP_RES_SG)    return RES_RE_IM, Mod, COMP_RES_SG'''    ---------TESTING----------''''''data = r.data_test(7)barker = r.barker_('p7')re = r.data_test(7)[0:-1:2]im = r.data_test(7)[1::2]#pprint(barker)COMP_TEST_B = trans.COMP(re,im)#print(COMP_TEST_B)#pprint(compression(COMP_TEST_B,barker)[0][:20:])data = r.data_test(7)barker = r.barker_('p7')re = r.data_test(7)[0:-1:2]im = r.data_test(7)[1::2]#pprint(barker)COMP_TEST_B = trans.in_COMP(re,im)#print(COMP_TEST_B)print(SG_data(data,barker))'''