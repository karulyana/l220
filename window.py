import sysimport numpyimport PyQt5.QtGuifrom PyQt5.QtCore import Qt#import PyQt5.Qtfrom PyQt5.Qt import pyqtSignalfrom PyQt5.QtWidgets import *from pprint import pprintimport Windows.Диалоги.Диалог1import Windows.Диалоги.Диалог2from Windows.Диалоги import Диалог_траукторияimport Windows.Plot_simport Windows.Диалоги.Диалог_файлаimport __def__.BPFimport __def__.bpf__import __def__._0_read as rimport __def__._1_compresimport __def__._0_transform as tranimport __def__.trajectory as tragplot1 = Windows.Plot_s.Plot1()plot2 = Windows.Plot_s.Plot2()plot3 = Windows.Plot_s.Plot3()plot4 = Windows.Plot_s.Plot4()Диалог1 = Windows.Диалоги.Диалог1.Dialog1()Диалог2 = Windows.Диалоги.Диалог2.Dialog2()barker = r.barker_('p13')data_test = r.data_test(13)bpf = __def__.bpf__.bpfai = [    0.940306193319157, 0.954130733952570,    0.966193987895793, 0.976461070265884,    0.984902269883832, 0.991493145379124,    0.996214604271025, 0.999052964757309,    1.0,    0.999052964757309, 0.996214604271025,    0.991493145379124, 0.984902269883832,    0.976461070265884, 0.966193987895793,    0.954130733952570, 0.940306193319157,]class Window(QWidget):    def __init__(self):        super().__init__()        self.FileDialog = Windows.Диалоги.Диалог_файла.FileDialog        self.Диалог_траектория = Диалог_трауктория.Dialog_traj()        #self.Диалог1 = Windows.Диалоги.Диалог1.Dialog1()        #self.Диалог2 = Windows.Диалоги.Диалог2.Dialog2()        self.window()    def window(self):        self.resize(1000, 600)                        # Размеры окна.        self.center()                                # Центрируем окно.        self.setWindowTitle('Основное окно')              # Нидпись в заголовке.        # self.setWindowIcon(QIcon('./Icon/edit1'))  # Иконка прложения.        self.grid()        self.show()    def grid(self):        self.gride = QGridLayout()        self.but_open = QPushButton('Открываю')        self.строка = QLineEdit()        self.but1 = QPushButton('Таблица№1')        self.but2 = QPushButton('Таблица№1')        self.but_traj = QPushButton('Траектория')        '''метка изменений'''        self.but1.pressed.connect(Диалог1.show)        '''метка изменений'''        self.but2.pressed.connect(Диалог2.show)        self.but_traj.pressed.connect(self.sld_dialog)        self.but_open.pressed.connect(self.FileDialog1)        self.gride.addWidget(self.but_open, 0,1)        self.gride.addWidget(self.строка, 0,2)        self.gride.addWidget(self.but1, 0,3)        self.gride.addWidget(self.but2, 0,4)        #self.gride.addWidget(self.but3, 0,5)        self.gride.addWidget(self.but_traj, 1,1)        self.gride.addWidget(TabDemo(), *(2,1,10,5))        self.setLayout(self.gride)    '''Основная функция ответа на открытый файл'''    def sld_dialog(self):        print('sld_dialog')        self.Диалог_траектория.show()        print('end_sld_dialog')    def FileDialog1(self):        print('FileDialog_0')        self.fileName = QFileDialog.getOpenFileName (self, 'Выберете файл', 'E:\\prog_window\Windows')[0]        self.строка.setText(self.fileName)        res = self.FileDialog(self.fileName)        dialog1_d = res[0]        dialog2_d = res[1]        plot1_d = res[2]        plot2_d = res[3]        plot3_d = res[4]        plot4_d = res[5]        Диалог1.table.my_signal.emit(dialog1_d) #таблица1        Диалог2.table.my_signal.emit(dialog2_d) #таблица2        plot1.my_signal_plot.emit(plot1_d) # вкладка - график 1        plot2.my_signal_plot.emit(plot2_d) # вкладка - график 2        plot3.my_signal_plot.emit(plot3_d) # вкладка - график 3        #plot4.my_signal_plot.emit(plot4_d) # вкладка - график 4        '''        self.data = []        #r.READ_file_(self.fileName, self.data)        #self.Диалог1.table.my_signal.emit(self.data)        #self.Диалог2.table.my_signal.emit(self.data)        d = r.READ_FILE_zoo(self.fileName)        self.data1 = tran.from_COMP_in_RE_IM(d[0])[0::2]        self.data2 = tran.from_COMP_in_RE_IM(d[1])[1::2]        Диалог1.table.my_signal.emit(self.data1)        self.data = []        self.data.append(self.data1)        self.data.append(self.data2)        #self.Диалог1.table.my_signal.emit(self.data2)        plot1.my_signal_plot.emit(self.data) # вкладка - график 1        r1 = Windows.compres.compression_comp(self.data1, barker)        r2 = Windows.compres.compression_comp(self.data2, barker)        r1_ = tran.from_COMP_in_RE_IM(r1)[0::2]        r2_ = tran.from_COMP_in_RE_IM(r2)[0::2]        Диалог2.table.my_signal.emit(r1) #обновление таблицы 2        res = []        res.append(r1_)        res.append(r2_)        plot2.my_signal_plot.emit(res) # вкладка - график 2        r1 = Windows.compres.compression_2_comp(r1)        r2 = Windows.compres.compression_2_comp(r2)        r1_ = tran.in_log_(r1)        r2_ = tran.in_log_(r2)        #r1_ = tran.from_COMP_in_RE_IM(r1)[0::2]        #r2_ = tran.from_COMP_in_RE_IM(r2)[0::2]        Диалог2.table.my_signal.emit(r1_) #обновление таблицы #2        res = []        res.append(r1_)        res.append(r2_)        plot3.my_signal_plot.emit(res) # вкладка - график 3 после 2 сжатия        r3 = bpf(r1)        Диалог2.table.my_signal.emit(r3) #обновление таблицы #        #r4 = Windows.BPF.bpf(r2)[0]        r4 = r3        res = []        res.append(r3)        res.append(r4)        plot4.my_signal_plot.emit(res) # вкладка - график 4 БПФ'''    def center(self):        qr = self.frameGeometry()        cp = QDesktopWidget().availableGeometry().center()        qr.moveCenter(cp)        self.move(qr.topLeft())        #print(qr.topLeft())    def keyPressEvent(self, e):        print('END')        if e.key() == Qt.Key_Escape:            self.close()            self.Диалог1.close()            self.Диалог2.close()        if e.key() == Qt.Key_O:            self.FileDialog1()class TabDemo(QTabWidget):    def __init__(self, parent=None):        super(TabDemo, self).__init__(parent)        #m = PlotCanvas(self, width=8, height=5)        self.tab1 = QWidget()        self.tab2 = QWidget()        self.tab3 = QWidget()        self.tab4 = QWidget()        self.addTab(self.tab1, "Tab 1")        self.addTab(self.tab2, "Tab 2")        self.addTab(self.tab3, "Tab 3")        self.addTab(self.tab4, "Tab 4")        self.tab1UI()        self.tab2UI()        self.tab3UI()        self.tab4UI()    def tab1UI(self):        layout = QFormLayout()        self.setTabText(0, "Data")        plot1.ax.plot(data_test, 'b-')        plot1.white()        plot1.draw()        layout.addWidget(plot1)        self.tab1.setLayout(layout)    def tab2UI(self):        layout = QFormLayout()        self.setTabText(1, "Res: comp_1")        self.res = __def__._1_compres.compression(data_test[0::2], barker)        #print(self.res)        plot2.ax.plot(self.res, 'b-')        plot2.white()        plot2.draw()        layout.addRow(plot2)        self.tab2.setLayout(layout)    def tab3UI(self):        layout = QFormLayout()        self.setTabText(2, "Res: comp_2")        #print(self.res)        self.res1 = __def__._1_compres.compression_2(self.res)        res2 = tran.in_log(self.res1)        #print(self.res1)        plot3.ax.plot(self.res1, 'b-')        plot3.white()        plot3.draw()        layout.addRow(plot3)        self.tab3.setLayout(layout)    def tab4UI(self):        layout = QFormLayout()        self.setTabText(3, "Res: BPF")        r = [n for n in range(16)]        #print(r)        res = []        for n in range(16):            res.append(complex(n,0))        #print(res)        #self.coef_res = Windows.BPF.bpf(res)[1]        #self.res = Windows.BPF.bpf(res)[0]        #self.coef_res = tran.from_COMP_in_RE_IM(self.coef_res)[0::17]        #Диалог1.table.my_signal.emit(self.coef_res)        #Диалог2.table.my_signal.emit(self.res)        #plot4.ax.plot(self.coef_res, 'b-', self.res, 'r-' )        plot4.white()        plot4.draw()        layout.addRow(plot4)        self.tab4.setLayout(layout)